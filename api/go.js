// api/go.js
// –°–µ—Ä–≤–µ—Ä–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç (302) + –æ—Å—Ç–æ—Ä–æ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ULP + Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

const crypto = require('crypto');

const AFF_HOSTS = new Set([
  'xpuvo.com', // Tefal
  'rthsu.com', // Moulinex
  'ujhjj.com', // –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å–µ—Ç—å FloraExpress
  'www.floraxpress.ru', // –ü—Ä—è–º–æ–π –º–∞–≥–∞–∑–∏–Ω (–¥–æ–±–∞–≤–∏—Ç—å UTM)
  'kpwfp.com', // BoxDari / –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è
  'bywiola.com', // –ë—É–±–ª—å –ì—É–º
  'qwpeg.com', // Flor2U
  'dhwnh.com', // Aliexpress
  'gndrz.com', // Letual
  'ytebb.com', // Askona
  'ogsib.com', // –°–æ—é–∑–¶–≤–µ—Ç–¢–æ—Ä–≥
  'uuwgc.com', // –ú–∞–∫—Å–∏–¥–æ–ú
  'admitad.com', // Admitad
  'advcake.com', // advcake.com
]);

const PROBLEMATIC_REDIRECT_PATTERNS = ['offerwall.admitad.com'];

// –§–ò–ö–°: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ base64 URL
function b64urlDecode(input) {
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º padding –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    let b64 = input.replace(/-/g, '+').replace(/_/g, '/');
    while (b64.length % 4) {
      b64 += '=';
    }
    return Buffer.from(b64, 'base64').toString('utf8');
  } catch (error) {
    console.log('Base64 decode error:', error.message);
    return '';
  }
}

function safeDecodeURIComponent(s) {
  try {
    const once = decodeURIComponent(s);
    try {
      return decodeURIComponent(once);
    } catch {
      return once;
    }
  } catch {
    return s;
  }
}

// –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è fetch —Å —Ç–∞–π–º–∞—É—Ç–æ–º
async function fetchWithTimeout(url, opts = {}, timeoutMs = 6000) {
  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), timeoutMs);

  try {
    const response = await fetch(url, {
      ...opts,
      signal: controller.signal,
      headers: {
        'user-agent': 'Mozilla/5.0 (compatible; GiftBot-Probe/1.0)',
        accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        ...opts.headers,
      },
    });
    return response;
  } finally {
    clearTimeout(timeout);
  }
}

// –ü–†–û–ë–ù–ò–ö ULP
async function probeUlp(ulpStr) {
  try {
    const u = new URL(ulpStr);
    const host = u.hostname;

    // 1) HEAD ‚Äî –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å
    try {
      const head = await fetchWithTimeout(ulpStr, { method: 'HEAD' }, 2500);
      if ([404, 410].includes(head.status)) {
        return { dead: true, reason: 'http-dead', status: head.status, host };
      }
    } catch {
      // —Ç–∞–π–º–∞—É—Ç/–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ GET
    }

    // 2) GET ‚Äî –µ—Å–ª–∏ HEAD –Ω–µ –ø–æ–∫–∞–∑–∞–ª dead
    let getResp;
    try {
      getResp = await fetchWithTimeout(ulpStr, { method: 'GET' }, 4500);
    } catch {
      return { dead: false, reason: 'probe-error', status: 0, host };
    }

    if ([404, 410].includes(getResp.status)) {
      return { dead: true, reason: 'http-dead', status: getResp.status, host };
    }

    return { dead: false, reason: 'ok', status: getResp.status, host };
  } catch {
    return { dead: false, reason: 'probe-error', status: 0, host: null };
  }
}

// –ü–†–û–í–ï–†–ö–ê –ü–†–û–ë–õ–ï–ú–ù–´–• –†–ï–î–ò–†–ï–ö–¢–û–í
async function checkProblematicRedirect(affiliateUrl, originalUlp) {
  try {
    const response = await fetchWithTimeout(
      affiliateUrl,
      {
        method: 'HEAD',
        redirect: 'follow',
      },
      5000,
    );

    const finalUrl = response.url;

    for (const pattern of PROBLEMATIC_REDIRECT_PATTERNS) {
      if (finalUrl.includes(pattern)) {
        return {
          isProblematic: true,
          pattern: pattern,
          finalUrl: finalUrl,
          originalUlp: originalUlp,
          affiliateHost: new URL(affiliateUrl).hostname,
        };
      }
    }

    return { isProblematic: false };
  } catch (error) {
    return { isProblematic: false };
  }
}

// Upstash Redis —Ñ—É–Ω–∫—Ü–∏–∏
function sha1(input) {
  return crypto.createHash('sha1').update(input).digest('hex');
}

async function incrWithTtl24h(key) {
  const url = process.env.UPSTASH_REDIS_REST_URL;
  const token = process.env.UPSTASH_REDIS_REST_TOKEN;
  if (!url || !token) return null;

  const r1 = await fetch(`${url}/incr/${encodeURIComponent(key)}`, {
    method: 'GET',
    headers: { Authorization: `Bearer ${token}` },
  });
  const t1 = await r1.text();
  const m = t1.match(/:(\d+)/);
  const count = m ? parseInt(m[1], 10) : Number.NaN;
  if (Number.isNaN(count)) return null;

  if (count === 1) {
    await fetch(`${url}/expire/${encodeURIComponent(key)}/86400`, {
      method: 'GET',
      headers: { Authorization: `Bearer ${token}` },
    });
  }
  return count;
}

// –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è upstashSet
async function upstashSet(key, value, ttlSec = null) {
  const url = process.env.UPSTASH_REDIS_REST_URL;
  const token = process.env.UPSTASH_REDIS_REST_TOKEN;
  if (!url || !token) return false;

  await fetch(`${url}/set/${encodeURIComponent(key)}/${encodeURIComponent(value)}`, {
    method: 'GET',
    headers: { Authorization: `Bearer ${token}` },
  });

  if (ttlSec) {
    await fetch(`${url}/expire/${encodeURIComponent(key)}/${ttlSec}`, {
      method: 'GET',
      headers: { Authorization: `Bearer ${token}` },
    });
  }
  return true;
}

// –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è escapeHtml
function escapeHtml(s) {
  return String(s).replace(
    /[&<>"']/g,
    (c) => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' })[c],
  );
}

// Telegram —Ñ—É–Ω–∫—Ü–∏—è
async function sendTelegram(message) {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;
  if (!token || !chatId) return { ok: false, status: null, body: 'missing env' };

  const url = `https://api.telegram.org/bot${token}/sendMessage`;
  const resp = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text: escapeHtml(message),
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    }),
  });
  const body = await resp.text();
  return { ok: resp.ok, status: resp.status, body };
}

async function notifyIfNeededTelegram(
  ulp,
  shopHost,
  reason = 'unknown',
  status = null,
  problematicRedirect = null,
) {
  const hash = sha1(ulp);
  const key = `dead:${hash}`;
  const count = await incrWithTtl24h(key);
  if (!count) return;
  if (count > 2) return;

  const env = process.env.APP_ENV || 'production';
  const time = new Date().toISOString();

  let message = '';

  if (problematicRedirect) {
    message =
      `üîÑ <b>[${escapeHtml(env)}] –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç Admitad</b>\n` +
      `‚îå <b>–ê—Ñ—Ñ–∏–ª–µ–π—Ç:</b> ${escapeHtml(problematicRedirect.affiliateHost)}\n` +
      `‚îú <b>–ú–∞–≥–∞–∑–∏–Ω:</b> ${escapeHtml(shopHost || '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n` +
      `‚îú <b>–ü–∞—Ç—Ç–µ—Ä–Ω:</b> ${escapeHtml(problematicRedirect.pattern)}\n` +
      `‚îú <b>–¢–∏–ø:</b> Offerwall (CORS –æ—à–∏–±–∫–∏)\n` +
      `‚îî <b>–°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ #${count} –∑–∞ 24—á</b>\n\n` +
      `<b>–í—Ä–µ–º—è:</b> ${time}\n` +
      `<b>ULP:</b> ${escapeHtml(ulp)}`;
  } else {
    const hostLine = shopHost ? `\n<b>–ú–∞–≥–∞–∑–∏–Ω:</b> ${escapeHtml(shopHost)}` : '';
    const statusLine = status ? `\n<b>HTTP:</b> ${status}` : '';
    const reasonLine = `\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> ${escapeHtml(reason)}`;

    message =
      `<b>[${escapeHtml(env)}] –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è</b>${hostLine}${statusLine}${reasonLine}\n` +
      `<b>ULP:</b> ${escapeHtml(ulp)}\n` +
      `<b>–°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ #${count} –∑–∞ 24—á</b>\n` +
      `<b>–í—Ä–µ–º—è:</b> ${time}`;
  }

  const tg = await sendTelegram(message).catch((e) => ({
    ok: false,
    status: null,
    body: String(e),
  }));

  const logKey = `tglog:${hash}:${count}`;
  const logVal = JSON.stringify({
    time,
    status: tg.status,
    ok: !!tg.ok,
    body: tg.body,
    type: problematicRedirect ? 'problematic_redirect' : 'dead_link',
  });
  await upstashSet(logKey, logVal, 86400).catch(() => {});
  await upstashSet(`tglog:last:${hash}`, logVal, 86400).catch(() => {});
}

// –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
// –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ulpParam)
module.exports = async (req, res) => {
  console.log('üéØ API/go –í–´–ó–í–ê–ù!');
  console.log('Query params:', req.query);

  // === –î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–î–†–û–ë–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
  console.log('=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò API/GO ===');
  console.log('üïí –í—Ä–µ–º—è –≤—ã–∑–æ–≤–∞:', new Date().toISOString());
  console.log('üîç Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', JSON.stringify(req.query, null, 2));
  console.log('üåê User Agent:', req.headers['user-agent']);
  console.log('üìß Referer:', req.headers['referer']);

  const { t, to } = req.query || {};
  console.log('Parameter t:', t);
  console.log('Parameter to:', to);

  // ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ raw URL (–Ω–µ –ø–∞–¥–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ t –±–∏—Ç—ã–π)
  //    1) –µ—Å–ª–∏ –µ—Å—Ç—å `to` ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
  //    2) –∏–Ω–∞—á–µ, –µ—Å–ª–∏ –µ—Å—Ç—å `t` ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –Ω–∞—à b64urlDecode
  //    3) –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≤–∏–º –∏ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
  let raw = '';
  if (typeof to === 'string' && to.trim()) {
    raw = to;
  } else if (typeof t === 'string' && t.trim()) {
    try {
      // –í–ê–ñ–ù–û: —Ñ—É–Ω–∫—Ü–∏—è b64urlDecode –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∞ –í–´–®–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
      // (–≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏; –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –µ—ë –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ)
      raw = b64urlDecode(t);
    } catch (e) {
      console.log('b64urlDecode error:', e && e.message ? e.message : String(e));
      raw = '';
    }
  }

  console.log('Decoded raw URL:', raw);


  if (!raw) {
    res.statusCode = 400;
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');
    res.end('Bad request: missing URL parameter');
    return;
  }

  let url;
  try {
    url = new URL(raw);
  } catch (error) {
    console.log('URL parsing error:', error.message);
    res.statusCode = 400;
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');
    res.end('Bad request: invalid URL');
    return;
  }

  // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  const isHttp = url.protocol === 'http:' || url.protocol === 'https:';
  if (!isHttp) {
    res.statusCode = 400;
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');
    res.end('Bad request: protocol must be http/https');
    return;
  }

  if (!AFF_HOSTS.has(url.hostname)) {
    console.log('Domain not allowed:', url.hostname);
    res.statusCode = 400;
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');
    res.end('Bad request: domain not allowed');
    return;
  }

  console.log('Valid affiliate URL:', url.toString());

  // === –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ì–ò –î–õ–Ø ULP –ü–†–û–í–ï–†–ö–ò ===
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ULP –ø–∞—Ä–∞–º–µ—Ç—Ä...');

  // –í–ê–ñ–ù–û: –æ–±—ä—è–≤–ª—è–µ–º –ü–ï–†–ï–î –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï–ú/–õ–û–ì–û–ú
  const ulpParam = url.searchParams.get('ulp');
  console.log('üì¶ ULP –∏–∑ URL:', ulpParam);

  if (ulpParam) {
    const decodedUlp = safeDecodeURIComponent(ulpParam);
    console.log('ULP found:', decodedUlp);

    // === –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ì–ò –ü–ï–†–ï–î –ü–†–û–í–ï–†–ö–û–ô ===
    console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É ULP...');
    console.log('üîó ULP –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', decodedUlp);

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
    const redirectCheck = await checkProblematicRedirect(url.toString(), decodedUlp);
    if (redirectCheck.isProblematic) {
      console.log('Problematic redirect detected');
      try {
        await notifyIfNeededTelegram(
          decodedUlp,
          redirectCheck.originalUlp ? new URL(redirectCheck.originalUlp).hostname : null,
          'problematic_redirect',
          null,
          redirectCheck,
        );
      } catch (error) {
        console.log('Telegram notification error:', error);
      }

      const shopParam = redirectCheck.affiliateHost
        ? `?shop=${encodeURIComponent(redirectCheck.affiliateHost)}`
        : '';
      res.statusCode = 302;
      res.setHeader('Location', `/out-of-stock.html${shopParam}`);
      res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0');
      res.setHeader('Pragma', 'no-cache');
      res.end();
      return;
    }

    // 2. –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ULP
    const probe = await probeUlp(decodedUlp);
    console.log('ULP probe result:', probe);

    // === –î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–î–†–û–ë–ù–´–ï –õ–û–ì–ò –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ü–†–û–í–ï–†–ö–ò ===
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò ULP:');
    console.log('  - dead:', probe.dead);
    console.log('  - reason:', probe.reason);
    console.log('  - status:', probe.status);
    console.log('  - host:', probe.host);
    console.log('  - timestamp:', new Date().toISOString());

    if (probe.dead) {
      console.log('Dead ULP detected');

      // === –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ì –ü–ï–†–ï–î –†–ï–î–ò–†–ï–ö–¢–û–ú ===
      console.log('üéØ –í–´–ü–û–õ–ù–Ø–ï–ú –†–ï–î–ò–†–ï–ö–¢ –ù–ê OUT-OF-STOCK!');
      console.log('üìç –¶–µ–ª—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞:', `/out-of-stock.html?shop=${probe.host || 'unknown'}`);

      try {
        await notifyIfNeededTelegram(decodedUlp, probe.host, probe.reason, probe.status);
      } catch (error) {
        console.log('Telegram notification error:', error);
      }

      const shopParam = probe.host ? `?shop=${encodeURIComponent(probe.host)}` : '';
      res.statusCode = 302;
      res.setHeader('Location', `/out-of-stock.html${shopParam}`);
      res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0');
      res.setHeader('Pragma', 'no-cache');
      res.end();
      return;
    }
  }

  // –®—Ç–∞—Ç–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç
  console.log('Proceeding with normal redirect to:', url.toString());

  // === –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ì –ü–ï–†–ï–î –®–¢–ê–¢–ù–´–ú –†–ï–î–ò–†–ï–ö–¢–û–ú ===
  console.log('‚úÖ –®–¢–ê–¢–ù–´–ô –†–ï–î–ò–†–ï–ö–¢ –ù–ê –ü–ê–†–¢–ù–ï–†–°–ö–£–Æ –°–°–´–õ–ö–£');
  console.log('üìç –¶–µ–ª—å:', url.toString());
  console.log('=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò API/GO ===');

  res.statusCode = 302;
  res.setHeader('Location', url.toString());
  res.setHeader('Referrer-Policy', 'no-referrer');
  res.setHeader('Cache-Control', 'no-store');
  res.end();
};

