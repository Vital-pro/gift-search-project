// –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ulpParam)
module.exports = async (req, res) => {
  console.log('üéØ API/go –í–´–ó–í–ê–ù!');
  console.log('Query params:', req.query);

  // === –î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–î–†–û–ë–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
  console.log('=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò API/GO ===');
  console.log('üïí –í—Ä–µ–º—è –≤—ã–∑–æ–≤–∞:', new Date().toISOString());
  console.log('üîç Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', JSON.stringify(req.query, null, 2));
  console.log('üåê User Agent:', req.headers['user-agent']);
  console.log('üìß Referer:', req.headers['referer']);

  const { t, to } = req.query || {};
  console.log('Parameter t:', t);
  console.log('Parameter to:', to);

  // –§–ò–ö–°: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ raw URL
  let raw = '';
  if (typeof to === 'string') {
    raw = to;
  } else if (typeof t === 'string') {
    raw = b64urlDecode(t);
  }

  console.log('Decoded raw URL:', raw);

  if (!raw) {
    res.statusCode = 400;
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');
    res.end('Bad request: missing URL parameter');
    return;
  }

  let url;
  try {
    url = new URL(raw);
  } catch (error) {
    console.log('URL parsing error:', error.message);
    res.statusCode = 400;
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');
    res.end('Bad request: invalid URL');
    return;
  }

  // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  const isHttp = url.protocol === 'http:' || url.protocol === 'https:';
  if (!isHttp) {
    res.statusCode = 400;
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');
    res.end('Bad request: protocol must be http/https');
    return;
  }

  if (!AFF_HOSTS.has(url.hostname)) {
    console.log('Domain not allowed:', url.hostname);
    res.statusCode = 400;
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');
    res.end('Bad request: domain not allowed');
    return;
  }

  console.log('Valid affiliate URL:', url.toString());

  // === –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ì–ò –î–õ–Ø ULP –ü–†–û–í–ï–†–ö–ò ===
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ULP –ø–∞—Ä–∞–º–µ—Ç—Ä...');

  // –í–ê–ñ–ù–û: –æ–±—ä—è–≤–ª—è–µ–º –ü–ï–†–ï–î –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï–ú/–õ–û–ì–û–ú
  const ulpParam = url.searchParams.get('ulp');
  console.log('üì¶ ULP –∏–∑ URL:', ulpParam);

  if (ulpParam) {
    const decodedUlp = safeDecodeURIComponent(ulpParam);
    console.log('ULP found:', decodedUlp);

    // === –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ì–ò –ü–ï–†–ï–î –ü–†–û–í–ï–†–ö–û–ô ===
    console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É ULP...');
    console.log('üîó ULP –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', decodedUlp);

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
    const redirectCheck = await checkProblematicRedirect(url.toString(), decodedUlp);
    if (redirectCheck.isProblematic) {
      console.log('Problematic redirect detected');
      try {
        await notifyIfNeededTelegram(
          decodedUlp,
          redirectCheck.originalUlp ? new URL(redirectCheck.originalUlp).hostname : null,
          'problematic_redirect',
          null,
          redirectCheck,
        );
      } catch (error) {
        console.log('Telegram notification error:', error);
      }

      const shopParam = redirectCheck.affiliateHost
        ? `?shop=${encodeURIComponent(redirectCheck.affiliateHost)}`
        : '';
      res.statusCode = 302;
      res.setHeader('Location', `/out-of-stock.html${shopParam}`);
      res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0');
      res.setHeader('Pragma', 'no-cache');
      res.end();
      return;
    }

    // 2. –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ULP
    const probe = await probeUlp(decodedUlp);
    console.log('ULP probe result:', probe);

    // === –î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–î–†–û–ë–ù–´–ï –õ–û–ì–ò –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ü–†–û–í–ï–†–ö–ò ===
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò ULP:');
    console.log('  - dead:', probe.dead);
    console.log('  - reason:', probe.reason);
    console.log('  - status:', probe.status);
    console.log('  - host:', probe.host);
    console.log('  - timestamp:', new Date().toISOString());

    if (probe.dead) {
      console.log('Dead ULP detected');

      // === –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ì –ü–ï–†–ï–î –†–ï–î–ò–†–ï–ö–¢–û–ú ===
      console.log('üéØ –í–´–ü–û–õ–ù–Ø–ï–ú –†–ï–î–ò–†–ï–ö–¢ –ù–ê OUT-OF-STOCK!');
      console.log('üìç –¶–µ–ª—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞:', `/out-of-stock.html?shop=${probe.host || 'unknown'}`);

      try {
        await notifyIfNeededTelegram(decodedUlp, probe.host, probe.reason, probe.status);
      } catch (error) {
        console.log('Telegram notification error:', error);
      }

      const shopParam = probe.host ? `?shop=${encodeURIComponent(probe.host)}` : '';
      res.statusCode = 302;
      res.setHeader('Location', `/out-of-stock.html${shopParam}`);
      res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0');
      res.setHeader('Pragma', 'no-cache');
      res.end();
      return;
    }
  }

  // –®—Ç–∞—Ç–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç
  console.log('Proceeding with normal redirect to:', url.toString());

  // === –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ì –ü–ï–†–ï–î –®–¢–ê–¢–ù–´–ú –†–ï–î–ò–†–ï–ö–¢–û–ú ===
  console.log('‚úÖ –®–¢–ê–¢–ù–´–ô –†–ï–î–ò–†–ï–ö–¢ –ù–ê –ü–ê–†–¢–ù–ï–†–°–ö–£–Æ –°–°–´–õ–ö–£');
  console.log('üìç –¶–µ–ª—å:', url.toString());
  console.log('=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò API/GO ===');

  res.statusCode = 302;
  res.setHeader('Location', url.toString());
  res.setHeader('Referrer-Policy', 'no-referrer');
  res.setHeader('Cache-Control', 'no-store');
  res.end();
};
