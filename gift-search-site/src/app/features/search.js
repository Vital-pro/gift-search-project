// gift-search-site/src/app/features/search.js
// –ï–¥–∏–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã.
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞–º–∏ ‚Äî —á–µ—Ä–µ–∑ searchView (enterSearchMode/resetSearchView/scrollWithOffset).

import { GIFTS } from '../../../data/index.js';
import { parseQuery } from '../../domain/parseQuery.js';
import { filterGifts } from '../../domain/filterGifts.js';

import { createGiftCard } from '../../ui/components/GiftCard.js';
import { createTelegramCTA } from '../../ui/components/TelegramCTA.js';

import { INITIAL_BATCH, LOAD_BATCH, TELEGRAM_BOT_URL } from '../config.js';
import { fetchGiftsBatch, renderPromoGifts } from './promo.js';
import { initCatalogList } from './catalog.js';

import {
  enterSearchMode,
  resetSearchView,
  clearTextInputsEverywhere,
  clearAltControlsEverywhere,
  scrollToSectionWithOffset,
} from '../ui/searchView.js';

import { formatRecipientGenitive } from '../utils/format.js';
import { recipientMap } from '../../../vendor/recipient-map.js';
import { appendSortedCards } from '../../utils/card-sorter.js'; // <-- –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£

// --- –º–æ–¥—É–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ ---
let searchAll = [];
let searchOffset = 0;
let currentParams = { recipient: null, age: null, budget: null };
// [–î–û–ë–ê–í–õ–ï–ù–û] –ó–∞—â–∏—Ç–∞ –æ—Ç –≥–æ–Ω–æ–∫: id –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–∏—Å–∫–∞
let activeSearchSessionId = 0;

// <-- –í–°–¢–ê–í–¨ –°–Æ–î–ê: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ recipientMap -->
function normalizeRecipient(raw) {
  if (!raw) return null;
  const r = String(raw).trim().toLowerCase();
  for (const [key, synonymsList] of Object.entries(recipientMap)) {
    if (r === key) return key;
    if (Array.isArray(synonymsList) && synonymsList.includes(r)) return key;
  }
  // –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –Ω–∏ –∫–∞–∫ –∫–ª—é—á, –Ω–∏ –∫–∞–∫ —Å–∏–Ω–æ–Ω–∏–º ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ—Ç
  return null;
}

// <-- –í–°–¢–ê–í–¨ –°–Æ–î–ê: —á—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ —Å —É—á—ë—Ç–æ–º –ª–∏–ø–∫–æ–π –ø–∞–Ω–µ–ª–∏ -->
function readAltControlsValues() {
  // –ï—Å–ª–∏ –≤–∏–¥–Ω–∞ –ø–ª–∞–≤–∞—é—â–∞—è –ø–∞–Ω–µ–ª—å ‚Äî —á–∏—Ç–∞–µ–º –∏–∑ –Ω–µ—ë (—É –Ω–µ—ë –Ω–µ—Ç id)
  const floatHost = document.querySelector('.search-float.visible');
  if (floatHost) {
    const recipientEl = floatHost.querySelector('.controls-grid select');
    const numberEls = floatHost.querySelectorAll('.controls-grid input[type="number"]');
    const recipient = recipientEl ? recipientEl.value : '';
    const ageRaw = numberEls[0] ? numberEls[0].value : '';
    const budgetRaw = numberEls[1] ? numberEls[1].value : '';
    return { recipient, ageRaw, budgetRaw, source: 'float' };
  }

  // –ò–Ω–∞—á–µ ‚Äî —á–∏—Ç–∞–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ –ø–æ id
  const recipient = document.getElementById('recipientSelect')?.value || '';
  const ageRaw = document.getElementById('ageInput')?.value || '';
  const budgetRaw = document.getElementById('budgetInput')?.value || '';
  return { recipient, ageRaw, budgetRaw, source: 'original' };
}

function rankAndSortGifts(items, params) {
  const rec = (params?.recipient || '').toLowerCase().trim();
  const age = Number.isFinite(params?.age) ? params.age : null;
  const budget = Number.isFinite(params?.budget) ? params.budget : null;

  console.log('=== DEBUG rankAndSortGifts ===');
  console.log('–ü–æ–ª—É—á–∞—Ç–µ–ª—å:', rec);
  console.log('–í–æ–∑—Ä–∞—Å—Ç:', age);
  console.log('–ë—é–¥–∂–µ—Ç:', budget);
  console.log('–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –≤—Ö–æ–¥–µ:', items.length);

  // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
  if (!rec) {
    console.log('‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω - –æ–±—ã—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞');
    return items
      .map((g) => scoreOne(g))
      .sort(compareScored)
      .map((x) => x.g);
  }

  // –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: —Å–Ω–∞—á–∞–ª–∞ –í–°–ï —Å —Ç–æ—á–Ω—ã–º —Ç–µ–≥–æ–º, –ø–æ—Ç–æ–º –í–°–ï –æ—Å—Ç–∞–ª—å–Ω—ã–µ
  const exact = [];
  const rest = [];

  const hasExactTag = (g) => {
    const has =
      Array.isArray(g.recipientTags) &&
      g.recipientTags.some((tag) => String(tag).toLowerCase() === rec);

    if (has) {
      console.log(`‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${g.name}" - —Ç–µ–≥–∏: [${g.recipientTags}]`);
    }
    return has;
  };

  for (const g of items) {
    if (hasExactTag(g)) {
      exact.push(g);
    } else {
      rest.push(g);
    }
  }

  console.log(`üìä –ò–¢–û–ì: exact=${exact.length}, rest=${rest.length}`);

  // –í–ê–ñ–ù–û: –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ã—á–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
  const exactSorted = exact
    .map((g) => scoreOne(g))
    .sort(compareScored)
    .map((x) => x.g);

  const restSorted = rest
    .map((g) => scoreOne(g))
    .sort(compareScored)
    .map((x) => x.g);

  console.log('=== –ö–û–ù–ï–¶ DEBUG ===');

  // –°–Ω–∞—á–∞–ª–∞ –í–°–ï —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø–æ—Ç–æ–º –í–°–ï –æ—Å—Ç–∞–ª—å–Ω—ã–µ
  return [...exactSorted, ...restSorted];

  // --- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ---
  function scoreOne(g) {
    let score = 0;

    // –¢–û–õ–¨–ö–û –≤–æ–∑—Ä–∞—Å—Ç –∏ –±—é–¥–∂–µ—Ç - –ø–æ–ª—É—á–∞—Ç–µ–ª—å —É–∂–µ —É—á—Ç–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã
    // (B) –í–æ–∑—Ä–∞—Å—Ç
    if (age != null && Array.isArray(g.ageRange) && g.ageRange.length === 2) {
      const [min, max] = g.ageRange;
      if (Number.isFinite(min) && Number.isFinite(max)) {
        if (age >= min && age <= max) {
          const mid = (min + max) / 2;
          const width = Math.max(1, max - min);
          const dist = Math.abs(age - mid) / width;
          score += Math.max(0, 30 - Math.round(dist * 60));
        } else {
          const d = age < min ? min - age : age > max ? age - max : 0;
          score -= Math.min(25, d * 2);
        }
      }
    }

    // (C) –ë—é–¥–∂–µ—Ç
    if (budget != null && Number.isFinite(g.price)) {
      const diff = Math.abs(g.price - budget);
      const ratio = diff / Math.max(1, budget);
      if (ratio <= 0.2) score += 22;
      else if (ratio <= 0.5) score += 10;
      else if (g.price > budget) score -= 10;
      else score += 4;
    }

    // (D) –ù–µ–±–æ–ª—å—à–æ–π –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ¬´–¥–∂–∏—Ç—Ç–µ—Ä¬ª
    const id = Number(g.id) || 0;
    score += id % 5;

    return { g, score };
  }

  function compareScored(a, b) {
    if (b.score !== a.score) return b.score - a.score;
    const ap = Number(a.g.price) || 0;
    const bp = Number(b.g.price) || 0;
    if (ap !== bp) return ap - bp;
    const ai = Number(a.g.id) || 0;
    const bi = Number(b.g.id) || 0;
    return ai - bi;
  }
}

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π) ===

function renderSearchResultsGrid(GIFT_CARD_DEPS) {
  const sessionId = activeSearchSessionId;
  const section = document.getElementById('searchResults');
  const resultsCount = document.getElementById('resultsCount');
  const resultsTitle = document.getElementById('resultsTitle');
  const grid = document.getElementById('resultsGrid');
  const loadMoreBtn = document.getElementById('loadMoreBtn');
  const cta = document.getElementById('searchCTAContainer');
  const sortToggle = document.getElementById('sortToggle'); // –î–û–ë–ê–í–ò–õ

  if (!section || !grid || !loadMoreBtn || !cta || !sortToggle) return;

  // === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –î–û –∏–∑–º–µ–Ω–µ–Ω–∏–π ===
  console.log('üîç renderSearchResultsGrid - –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
  console.log('–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫:', searchAll.length);
  console.log('–ü–æ–ª—É—á–∞—Ç–µ–ª—å:', currentParams?.recipient);

  if (currentParams?.recipient) {
    const rec = currentParams.recipient.toLowerCase();
    const exactCount = searchAll.filter(
      (g) =>
        Array.isArray(g.recipientTags) &&
        g.recipientTags.some((tag) => String(tag).toLowerCase() === rec),
    ).length;
    console.log(`–¢–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${exactCount}`);

    console.log('–ü–µ—Ä–≤—ã–µ 6 –∫–∞—Ä—Ç–æ—á–µ–∫:');
    searchAll.slice(0, 6).forEach((g, i) => {
      const isExact =
        Array.isArray(g.recipientTags) &&
        g.recipientTags.some((tag) => String(tag).toLowerCase() === rec);
      console.log(`${i + 1}. "${g.name}" - exact: ${isExact} - —Ç–µ–≥–∏: [${g.recipientTags}]`);
    });
  }

  // === –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ===
  setupSortToggle();

  // [–ù–û–í–û–ï] ‚Äî –ø–æ—Ä—è–¥–æ–∫: –°–ù–ê–ß–ê–õ–ê CTA, –ü–û–¢–û–ú –∫–Ω–æ–ø–∫–∞
  if (loadMoreBtn.parentNode && cta.parentNode && cta.nextElementSibling !== loadMoreBtn) {
    loadMoreBtn.parentNode.insertBefore(cta, loadMoreBtn);
  }

  let title = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞';
  if (currentParams.recipient) {
    const rGen = formatRecipientGenitive(currentParams.recipient);
    title = `–ü–æ–¥–∞—Ä–∫–∏ –¥–ª—è ${rGen}`;
  }
  resultsTitle.textContent = title;
  resultsCount.textContent = `‚Äî –Ω–∞–π–¥–µ–Ω–æ ${searchAll.length}`;

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ—Ä–æ—Ç–∫–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
  resultsTitle.classList.remove('results-title-fade');
  resultsCount.classList.remove('results-title-fade');
  void resultsTitle.offsetWidth;
  resultsTitle.classList.add('results-title-fade');
  resultsCount.classList.add('results-title-fade');

  resultsCount.setAttribute('aria-live', 'polite');
  resultsCount.setAttribute('role', 'status');

  resultsTitle.setAttribute('tabindex', '-1');
  resultsTitle.focus({ preventScroll: true });

  // –û—á–∏—Å—Ç–∫–∞
  grid.innerHTML = '';
  searchOffset = 0;

  // –†–∏—Å—É–µ–º CTA
  cta.innerHTML = '';
  cta.appendChild(createTelegramCTA(TELEGRAM_BOT_URL));
  cta.classList.remove('hidden');

  // –ü–æ–∫–∞–∑ —Å–µ–∫—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  section.classList.remove('hidden');

  // –†–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—É—é –ø–æ—Ä—Ü–∏—é
  renderCurrentBatch();

  // === –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–†–¢–ò–†–û–í–ö–ò ===

  function setupSortToggle() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (searchAll.length > 1) {
      sortToggle.classList.remove('hidden');
      sortToggle.setAttribute('aria-label', '–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    } else {
      sortToggle.classList.add('hidden');
      return;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    sortToggle.onclick = null;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    sortToggle.onclick = () => {
      const currentState = sortToggle.getAttribute('aria-pressed');
      const sortText = sortToggle.querySelector('.sort-text');

      if (currentState === 'false') {
        // –ü–µ—Ä–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã (–¥–æ—Ä–æ–≥–∏–µ —Å–Ω–∞—á–∞–ª–∞)
        sortToggle.setAttribute('aria-pressed', 'true');
        sortText.textContent = '–°–Ω–∞—á–∞–ª–∞ –Ω–µ–¥–æ—Ä–æ–≥–∏–µ';
        applyPriceSort('desc');
      } else if (currentState === 'true') {
        // –í—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã (–Ω–µ–¥–æ—Ä–æ–≥–∏–µ —Å–Ω–∞—á–∞–ª–∞)
        sortToggle.setAttribute('aria-pressed', 'asc');
        sortText.textContent = '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é';
        applyPriceSort('asc');
      } else {
        // –¢—Ä–µ—Ç—å–µ –Ω–∞–∂–∞—Ç–∏–µ: –≤–æ–∑–≤—Ä–∞—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
        sortToggle.setAttribute('aria-pressed', 'false');
        sortText.textContent = '–°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ';
        resetToDefaultSort();
      }
    };
  }

  function applyPriceSort(order) {
    const sorted = [...searchAll].sort((a, b) => {
      const priceA = a.price || 0;
      const priceB = b.price || 0;
      return order === 'desc' ? priceB - priceA : priceA - priceB;
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
    searchAll = sorted;
    searchOffset = 0;
    grid.innerHTML = '';
    renderCurrentBatch();

    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–∞—á–∞–ª—É
    setTimeout(() => {
      resultsTitle.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }, 100);
  }

  function resetToDefaultSort() {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ rankAndSortGifts
    const prioritized = rankAndSortGifts(GIFTS, currentParams);
    const filtered = filterGifts(prioritized, currentParams);
    searchAll = filtered;
    searchOffset = 0;
    grid.innerHTML = '';
    renderCurrentBatch();
  }

  function renderCurrentBatch() {
    fetchGiftsBatch(searchAll, searchOffset, INITIAL_BATCH).then((batch) => {
      if (sessionId !== activeSearchSessionId) return;

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–Ω–∞—á–∞–ª–∞
      const allCards = [];
      batch.forEach((gift) => {
        const card = createGiftCard(gift, GIFT_CARD_DEPS);
        if (card) {
          allCards.push(card);
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ grid
      appendSortedCards(grid, allCards);
      searchOffset += batch.length;

      if (searchOffset < searchAll.length) {
        loadMoreBtn.textContent = '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë';
        loadMoreBtn.classList.remove('hidden');
        loadMoreBtn.onclick = null;
        loadMoreBtn.onclick = handleLoadMore;
      } else {
        cta.innerHTML = '';
        cta.classList.add('hidden');
        loadMoreBtn.textContent = '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ';
        loadMoreBtn.classList.remove('hidden');
        loadMoreBtn.onclick = null;
        loadMoreBtn.onclick = () => {
          window.location.href = '/';
        };
      }

      setTimeout(() => scrollToSectionWithOffset(section, 12), 60);
    });
  }

  function handleLoadMore() {
    if (sessionId !== activeSearchSessionId) return;

    fetchGiftsBatch(searchAll, searchOffset, LOAD_BATCH).then((more) => {
      if (sessionId !== activeSearchSessionId) return;

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–Ω–∞—á–∞–ª–∞
      const allCards = [];
      more.forEach((gift) => {
        const card = createGiftCard(gift, GIFT_CARD_DEPS);
        if (card) {
          allCards.push(card);
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ grid
      appendSortedCards(grid, allCards);
      searchOffset += more.length;

      if (searchOffset < searchAll.length) {
        loadMoreBtn.textContent = '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë';
        loadMoreBtn.classList.remove('hidden');
      } else {
        cta.innerHTML = '';
        cta.classList.add('hidden');
        loadMoreBtn.textContent = '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ';
        loadMoreBtn.classList.remove('hidden');
        loadMoreBtn.onclick = null;
        loadMoreBtn.onclick = () => {
          window.location.href = '/';
        };
      }
    });
  }
}
/**
 * –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ (–ø–æ–ª–µ #searchInput)
 */
export function performSearch(GIFT_CARD_DEPS) {
  activeSearchSessionId++;
  const searchInput = document.getElementById('searchInput');
  const query = searchInput?.value.trim() || '';

  // –ø—Ä–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–∏—Å–∫–µ –æ—á–∏—â–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã (–≤–µ–∑–¥–µ)
  clearAltControlsEverywhere();

  if (!query) {
    // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤¬ª –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞
    document.getElementById('noResults')?.classList.remove('hidden');
    document.getElementById('searchResults')?.classList.add('hidden');
    return;
  }

  // –†–∞–∑–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
  const params = parseQuery(query);

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ –µ–¥–∏–Ω–æ–º—É —Å–ª–æ–≤–∞—Ä—é
  params.recipient = normalizeRecipient(params.recipient);
  window.currentSearchRecipient = params.recipient;

  // ¬´–ê–Ω—Ç–∏-–±–ª–∞–±–ª–∞¬ª: –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –±—É–∫–≤—ã, –Ω–æ –ù–ï —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
  // –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –Ω–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞, –Ω–∏ –±—é–¥–∂–µ—Ç–∞ ‚Äî –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫.
  const hasLetters = /\p{L}/u.test(query);
  if (hasLetters && !params.recipient && params.age == null && params.budget == null) {
    enterSearchMode(); // —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π UI, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    const section = document.getElementById('noResults');
    section?.classList.remove('hidden');
    document.getElementById('searchResults')?.classList.add('hidden');

    const h = section?.querySelector('h3');
    if (h) {
      h.setAttribute('tabindex', '-1');
      h.focus({ preventScroll: true });
    }
    scrollToSectionWithOffset(section, 12);
    return;
  }

  // === –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–µ–≥—É, –ø–æ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è ===
  currentParams = params;

  // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –ø–æ–¥–∞—Ä–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Ç–µ–≥–∞
  const prioritized = rankAndSortGifts(GIFTS, params);
  // –ü–æ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É/–±—é–¥–∂–µ—Ç—É
  const filtered = filterGifts(prioritized, params);

  if (!filtered.length) {
    enterSearchMode(); // —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π UI
    const section = document.getElementById('noResults');
    section?.classList.remove('hidden');
    document.getElementById('searchResults')?.classList.add('hidden');

    const h = section?.querySelector('h3');
    if (h) {
      h.setAttribute('tabindex', '-1');
      h.focus({ preventScroll: true });
    }
    scrollToSectionWithOffset(section, 12);
    return;
  }

  searchAll = filtered;
  enterSearchMode();
  renderSearchResultsGrid(GIFT_CARD_DEPS);
}

/**
 * –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã (select + inputs)
 */
export function performAlternativeSearch(GIFT_CARD_DEPS) {
  // [–î–û–ë–ê–í–õ–ï–ù–û] –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –ø–æ–∏—Å–∫–∞
  activeSearchSessionId++;
  const { recipient, ageRaw, budgetRaw } = readAltControlsValues();

  // –ø—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è (–≤–µ–∑–¥–µ)
  clearTextInputsEverywhere();

  const params = {
    recipient: normalizeRecipient(recipient),
    age: ageRaw ? parseInt(ageRaw, 10) : null,
    budget: budgetRaw ? parseInt(budgetRaw, 10) : null,
  };

  // === –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–µ–≥–æ–≤ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö ===
  window.currentSearchRecipient = params.recipient;

  // === –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–µ–≥—É, –ø–æ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è ===
  currentParams = params;

  // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –ø–æ–¥–∞—Ä–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Ç–µ–≥–∞
  const prioritized = rankAndSortGifts(GIFTS, params);
  // –ü–æ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É/–±—é–¥–∂–µ—Ç—É
  const filtered = filterGifts(prioritized, params);

  if (!filtered.length) {
    enterSearchMode(); // —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π UI
    const section = document.getElementById('noResults');
    section?.classList.remove('hidden');
    document.getElementById('searchResults')?.classList.add('hidden');

    const h = section?.querySelector('h3');
    if (h) {
      h.setAttribute('tabindex', '-1');
      h.focus({ preventScroll: true });
    }
    scrollToSectionWithOffset(section, 12);
    return;
  }

  searchAll = filtered;
  enterSearchMode();
  renderSearchResultsGrid(GIFT_CARD_DEPS);
}

/**
 * –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∫ –ø—Ä–æ–º–æ/–∫–∞—Ç–∞–ª–æ–≥—É (–∫–Ω–æ–ø–∫–∞ ¬´–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ¬ª)
 */
// export function resetSearchAndBack(GIFT_CARD_DEPS, promoIds) {
//   // 1) –°–±—Ä–æ—Å–∏–º —Ä–µ–∂–∏–º –∏ –ø—Ä–æ–∫—Ä—É—Ç–∏–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ (—á—Ç–æ–± —Ñ–æ–∫—É—Å –Ω–µ ¬´—Å—ä–µ–¥–∞–ª¬ª smooth)
//   resetSearchView({ instantScroll: true });

//   // 2) –Ø–≤–Ω–æ –≤–µ—Ä–Ω—ë–º –≤–∏–¥–∏–º–æ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∏ —É–±–µ—Ä—ë–º –ª–∏–ø–∫—É—é
//   const floatHost = document.querySelector('.search-float');
//   const originalBlock = document.querySelector('.search-block');
//   // –ª–∏–ø–∫—É—é –≤—ã–∫–ª—é—á–∞–µ–º
//   if (floatHost) {
//     floatHost.classList.remove('visible');
//     floatHost.classList.remove('force-visible'); // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
//   }
//   // –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
//   if (originalBlock) {
//     originalBlock.classList.remove('search-original-hidden');
//     originalBlock.classList.remove('compact');
//   }

//   // 3) –°–±—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
//   const loadMoreBtn = document.getElementById('loadMoreBtn');
//   if (loadMoreBtn) loadMoreBtn.onclick = null;

//   renderPromoGifts(Array.isArray(promoIds) ? promoIds : [1, 3, 5, 8, 12, 15], GIFT_CARD_DEPS);
//   initCatalogList(GIFT_CARD_DEPS);
// }

export function resetSearchAndBack(GIFT_CARD_DEPS, promoIds) {
  // 1) –°–±—Ä–æ—Å–∏–º —Ä–µ–∂–∏–º –∏ –ø—Ä–æ–∫—Ä—É—Ç–∏–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ (—á—Ç–æ–± —Ñ–æ–∫—É—Å –Ω–µ ¬´—Å—ä–µ–¥–∞–ª¬ª smooth)
  resetSearchView({ instantScroll: true });

  // 2) –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const sortToggle = document.getElementById('sortToggle');
  if (sortToggle) {
    sortToggle.classList.add('hidden');
    sortToggle.setAttribute('aria-pressed', 'false');
    const sortText = sortToggle.querySelector('.sort-text');
    if (sortText) sortText.textContent = '–°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ';
  }

  // 3) –Ø–≤–Ω–æ –≤–µ—Ä–Ω—ë–º –≤–∏–¥–∏–º–æ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∏ —É–±–µ—Ä—ë–º –ª–∏–ø–∫—É—é
  const floatHost = document.querySelector('.search-float');
  const originalBlock = document.querySelector('.search-block');
  // –ª–∏–ø–∫—É—é –≤—ã–∫–ª—é—á–∞–µ–º
  if (floatHost) {
    floatHost.classList.remove('visible');
    floatHost.classList.remove('force-visible'); // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  }
  // –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
  if (originalBlock) {
    originalBlock.classList.remove('search-original-hidden');
    originalBlock.classList.remove('compact');
  }

  // 4) –°–±—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
  const loadMoreBtn = document.getElementById('loadMoreBtn');
  if (loadMoreBtn) loadMoreBtn.onclick = null;

  renderPromoGifts(Array.isArray(promoIds) ? promoIds : [1, 3, 5, 8, 12, 15], GIFT_CARD_DEPS);
  initCatalogList(GIFT_CARD_DEPS);
}
